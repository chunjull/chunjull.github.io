[{"title":"#7 基本型別：布林值、null、undefined 與 symbol","date":"2023-10-30T16:00:00.000Z","url":"/javascript/20231031/2849981050/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"簡介布林值、null、undefined 與 symbol 等資料型別的常見應用。 快速了解布林值布林值（boolean）通常用在判斷式，作為控制程式流程的用途。其值只有兩種：true 及 false。 nullnull 型別只有一種值——null（空值），代表「此變數可能曾經有值，也可能沒有值，現在沒有值」。例如：以下案例中的 a ，明確表示此變數沒有值。 undefinedundefined 型別也只有一種值——undefined，代表「此變數還沒有給值，所以不知道是什麼」。例如：以下案例的 b，當變數 b 被宣告時，其值還沒有定義或還未指定的情況下，預設值會是 undefined。 symbolsymbol 是 ES6 新增的基本資料型別，用來表示獨一無二的值，以避免名稱相同造成的衝突。 小知識 在 JS 判斷比較的運算式中，所有內容都可以轉換為布林值。 typeof null 回傳結果是“obejct” ，而非 null。這其實是一個 Bug！但因為修正該問題，會影響太多舊程式，最後只好保留這個錯誤。 了解更多 fooish－JavaScript ES6 Symbol 資料型態：了解 Symbol 的使用情境。 stackoverflow－Why is typeof null “object”?：明白 typeof null 為什麼是 “obejct” 。 "},{"title":"#6 基本型別：數字","date":"2023-10-29T16:00:00.000Z","url":"/javascript/20231030/4193996687/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"數字型別除了基礎運算，NaN 與浮點數問題也相當重要。 快速了解JS 只有一種數字的型別，不論整數、浮點數，或 Infinity（無限大）、-Infinity（負無限大）及 NaN（不是數值）等特殊數字，都屬於 number 型別。 數字使用方式數字有兩種使用方式：字面常量與科學記號表示法。 字面常量： 科學記號表示法： 無限的計算方式Infinity 與 -Infinity 分別代表數學上的無限大與負無限大。任何正數除以 0，結果會得到 Infinity；相反的，任何負數除以 0，結果會是 -Infinity。 NaNNaN 不等於任何數字，甚至是自己。因此，它與任何數字運算，結果都是 NaN。然而，使用 typeof 判斷 NaN 型別時，回傳結果卻是數字。那麼該如何判斷一個變數是否為 NaN 呢？可以透過 isNaN(value) 函式來協助： 浮點數JS 在運算 0.1 + 0.2 時，其結果不是 0.3，而是 0.30000000000000004 。因此執行 0.1 + 0.2 === 0.3 會回傳 false 的結果。這是因為 JS 採用「IEEE 754」六十四位元二進位浮點數算術標準，十進位的小數無法完美的用二進位表示，只能用無限循環的位數來趨近於十進位的小數，導致還原時的小數不夠精準。透過 toFixed() 和 toPrecision() 設定精確度，可以避免浮點數問題。例如：設定精確到小數第一位。 小知識 數字型別常搭配 Math 物件使用，例如： Math.PI 可用來計算圓周和直徑。 了解更多 MDN－Math 物件：了解 Math 的常見用法。 MDN－NaN：了解 NaN 的使用方式與相關限制。 Floating Point Math：解釋 0.1 + 0.2 !== 0.3 的原理與彙整各程式語言計算方式。 "},{"title":"#5 基本型別：字串","date":"2023-10-28T16:00:00.000Z","url":"/javascript/20231029/3345115497/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"字串型別原本專門儲存、處理文字，樣板字面值的出現，大幅提升字串的靈活度。 快速了解在 JS 中，文字會以字串（string）表示。 字串使用方式字串會用一組單引號（’’）或雙引號（””）包住，且兩者不可混用。 在單引號中包覆單引號，或在雙引號中包覆雙引號都會出現問題。如果非用不可，可以透過跳脫字元（\\）處理： 遇到多組字串時，可以透過加號（+）連接： 或是在多行字串時，使用反斜線（\\）連結： 樣板字面值樣板字元值（template literal）是 ES6 新增的特殊字串，支援多行字串、允許將變數嵌入字串，且能夠內嵌運算式，大幅提升字串的靈活度。樣板字元值由反引號（&#96;&#96;）所包覆，由一般字串、錢字號（$）、大括弧（{}）組成。 支援多行字串： 允許將變數嵌入字串 內嵌運算式： 小知識 連接多行字串時，反斜線（\\）後方不可以有任何內容，包括空白字元。 反引號（&#96;）位於鍵盤左上方，Esc 底下。 了解更多 MDN－樣板字面值：了解樣板字面值的詳細內容與更多範例。 PJCHENder－樣板字面值：了解樣板字面值的應用。 菜鳥教程－HTML DOM console.log() 方法：簡介 console.log 用法。 "},{"title":"#4 資料型別簡介","date":"2023-10-27T16:00:00.000Z","url":"/javascript/20231028/764880996/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"變數沒有型別，值才有。 快速了解變數本身不帶有資料型別的資訊，其中的「值」或「物件」才有。換句話說，變數只是用來作為取得值或物件的參考。JS 的資料型別分為兩大類：基本型別（Primitives）與物件型別（Object）。 型別整理JS 總共有七種資料型別：六種基本型別及一種物件型別。 資料型別 說明 String 字串。 Number 數字，可以是整數或小數。 Boolean 布林值，只有 true、false 兩種。 null 空值，表示參考值不存在。 undefined 未定義，宣告變數卻未指派內容給它。 symbol 符號，表示獨一無二的值。 object 物件、陣列、函式都屬於物件型別。 型別判斷可以透過 typeof 運算子判斷型別。 小知識 JS 是一種「弱型別語言」，宣告變數時，可以不指定該值的資料型別。編譯時，JS 會將該變數轉換成「可以被執行」的資料型別，並強制執行。 了解更多 MDN－資料結構與型別：了解 JS 各資料型別的基本內容。 Yi-Ning－關於 JavaScript 的弱型別特性：了解弱型別語言的定義。 "},{"title":"#3 變數","date":"2023-10-26T16:00:00.000Z","url":"/javascript/20231027/1250803838/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"變數是儲存資料的容器，可以幫助我們紀錄、使用資訊。 快速了解變數是什麼？變數（Variables）是用來儲存資料和進行運算的基本單位，可以將變數想像為一個盒子，用來存放資料。變數儲存的資料被稱為「值」（value）。 變數的命名規則 變數的第一個字母必須是英文字母、底線（_）或錢字號（$），後面可以是英文字母、底線（_）或錢字號（$）及數字。 變數名稱不可以是保留字和關鍵字。 區分大小寫，「app」和「App」會被視為不同變數。 變數的宣告方式變數有三種宣告方式：var、let、const。差異為變數作用範圍、能否重複宣告等。變數必須經過宣告才能使用，如果在沒有宣告變數的情況下使用，會出現錯誤。 小知識 JS 支援 Unicode，變數名稱可以用中文命名。但基於開發習慣，仍應該避免使用英文字母、底線（_）或錢字號（$）以外的字原來命名變數。 事實上，變數還有第四種宣告方式：無宣告。但沒有經過宣告的變數都會變成全域變數，可能會造成維護困難，因此非常不建議這麼做！ 了解更多 MDN－存儲您需要的資訊 - 變數：詳細說明 JS 變數的使用規則。 W3School－JavaScript Reserved Words：JS 的保留字列表。 阿建－JavaScript 變數宣告有哪些?必須弄懂的4個重點：了解 JS 的四種變數宣告。 Roy Kwok－Unicode 與 UTF-8 的關係？：說明 Unicode 如何編譯中文字元。 "},{"title":"#2 JS 發展簡史","date":"2023-10-25T16:00:00.000Z","url":"/javascript/20231026/1784042972/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"JavaScript 如何從「網路特效工具箱」發展成網頁設計中不可或缺的一部份？ 背景故事JS 最初的設計目標是：在文件閱讀上增加互動，讓網站動起來。1995～2010 年這段期間，處於瀏覽器的戰國時代，各種瀏覽器百花齊放，且各家標準不一，造成網頁維護困難。ECMA 組織於 1997 年發表 JS 的標準化版本——ECMAScript，使 JS 開始獲得廣泛支持，成為瀏覽器唯一指定的內建程式語言。2015 年，ECMAScript 第六版本（簡稱 ES2015、ES6）發布前，有很多 JS 的延伸語言存在，例如：CoffeeScript、TypeScript、Dart 等，這些都是使用者因應需求，自行開發的程式語言。ES6 整合了上述延伸語言的優點並新增許多重要規範，使 JS 更強大，以便開發複雜的應用程式。從此，ES6 成為主流使用的 JS 標準。 小知識 Java 和 JavaScript 之間類似於「臘腸」和「臘腸狗」的關係——沒有關係。 TypeScript 是有型態規範的 JS，由微軟開發，有較嚴謹的寫法。直到今日，仍有許多開發者使用。 2015 年之後，ECMAScript 在每年六月會推出最新的版本，例如：ES2016、ES2017⋯⋯，這些新版本被統稱為「ES6+」。 了解更多 Kuro Hsu－重新認識 JavaScript: Day 02 JavaScript 簡介：圖文並茂講古時間。 ALPHACamp－JavaScript 前世今生：了解前端發展歷史。 "},{"title":"#1 JS 是什麼？","date":"2023-10-24T16:00:00.000Z","url":"/javascript/20231025/1925797630/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["JS一分鐘","/categories/javascript/"]],"content":"JavaScript 不是魔法，而是一種實現多樣化功能的程式語言。 快速了解JS 是什麼樣的程式語言？ JS 是一種腳本程式語言，具有簡單、易學、易用的特性。 JS 是一種直譯式語言，其程式碼由上到下執行，且能夠立即得到執行結果。 JS 是一種動態程式，會在瀏覽器上調整 HTML 與 CSS，以產生新的內容，並在頁面中呈現。因為此特性，使它必需在 HTML、CSS 之後載入，否則可能會發生錯誤。 JS 的功能JS 可以在網頁中展現複雜的動態功能，例如：表單驗證、彈跳動畫等互動行為。基礎的 JS 可以進行四則運算、數字排序、判斷大小寫等。若加上應用程式介面（API），還能提供 JS 額外的功能，例如：內容即時更新、繪製 2D&#x2F;3D 圖形、影片播放控制。 JS 的使用方式JS 主要有兩種載入方式：內部與外部。 內部的 JS：在 HTML 檔案的 &lt;/head&gt; 結尾標籤前加入以下文字。 外部的 JS：建立一個以 .js 為副檔名的檔案，將 JS 內容寫在該檔案內，並在 HTML 檔案的 &lt;/head&gt; 結尾標籤前加入以下文字。 JS 有兩種註解方式：單行和多行。 單行註解：文字寫在兩個斜線「&#x2F;&#x2F;」之後。 多行註解：文字寫在 &#x2F;* 和 *&#x2F; 之間。 了解更多 MDN－JavaScript 是什麼？：詳細說明 JS 的能力與使用方式。 MuleSoft Videos－What is an API?：了解 API 在網頁中扮演的角色與功能。 "},{"title":"⚡️ 最聰明的高效能溝通法","date":"2023-10-23T16:00:00.000Z","url":"/read/20231024/861377249/","tags":[["閱讀心得","/tags/%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97/"]],"categories":[["閱讀一分鐘","/categories/read/"]],"content":"我們平均花 26 秒閱讀一篇內容，卻仍用 80 年代的舊方式溝通。 為什麼重要：資訊爆炸的現在，若使用冗長的舊方法溝通，每天將會有數十億個文字成為無法被消化的成本，這些巨量文字不斷地轟炸你、浪費你的時間。「聰明簡潔溝通法」能為你帶來自信，成為更有力的溝通者，同時也能讓更多人聽見你的聲音。 什麼是「聰明簡潔溝通法」？「聰明簡潔溝通法」有四個核心觀念： 強大的「引子、標題」。 有力、令人難忘的「導言」。 交代背景脈絡的「為什麼重要」。 補充說明的「了解更多」。 透過這四個核心觀念的系統，能夠讓你用更少的時間分享更多的價值。「少即是多」的寫作精神，才是符合當前網路世代的交流模式。並且，不論簡報、電子郵件、社群軟體，任何溝通方法都適用！ 了解更多 Axios.com：看看聰明簡潔溝通法如何運作。 《聰明簡潔的溝通》：書籍購買連結。 書籍資訊 書名：聰明簡潔的溝通：200 字寫重點，26 秒贏得注意力 作者：吉姆．范德海、麥克．艾倫、羅伊．史瓦茲 出版社：天下文化 "},{"title":"404","date":"2023-10-27T16:00:00.000Z","url":"/404.html","categories":[[" ",""]],"content":"這是一個不存在的頁面很抱歉，你目前存取的頁面並不存在。預計將在約 5 秒後返回首頁。如果你很急著想看文章，你可以 點這裡 返回首頁。 let countTime = 5; function count() { document.getElementById('timeout').textContent = countTime; countTime -= 1; if(countTime === 0){ location.href = ''; } setTimeout(() => { count(); }, 1000); } count(); "},{"title":"archives","date":"2023-10-24T16:00:00.000Z","url":"/archives/index.html","categories":[[" ",""]]},{"title":"About","date":"2023-10-28T15:58:19.043Z","url":"/about/index.html","categories":[[" ",""]]},{"title":"category","date":"2023-10-24T16:00:00.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"search","date":"2023-10-24T16:00:00.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2023-10-24T16:00:00.000Z","url":"/tags/index.html","categories":[[" ",""]]}]